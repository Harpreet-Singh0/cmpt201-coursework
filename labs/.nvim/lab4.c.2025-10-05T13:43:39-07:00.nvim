#define _DEFAULT_SOURCE
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

struct header {
  uint64_t size;
  struct header *next;
};

struct block {
  struct header head;
  uint8_t *data;
};

struct block *initialize_block(uint64_t *block_pointer, int content_value) {
  struct block *b;
  b->head.size = 128;
  b->head.next = NULL;

  block_pointer[0] = b->head.size;
  block_pointer[1] = (uint64_t)b->head.next;

  b->data = (uint8_t *)block_pointer + 16;

  for (int i = 0; i < 116; i++) {
    b->data[i] = content_value;
  }

  return b;
}

int main() {
  int heap_increase = 256;
  uint64_t *program_break = (uint64_t *)sbrk(heap_increase);

  uint64_t *first_block_pointer = program_break;
  uint64_t *second_block_pointer = program_break + ((heap_increase / 2) / 8);
  
  first_block_pointer = (uint64_t *)malloc((heap_increase / 2) * sizeof(uint8_t)); 

  struct block *first_block = initialize_block(first_block_pointer, 0);
  //struct block *second_block = initialize_block(second_block_pointer, 1);

  printf("%p\n", first_block);
  printf("%p\n", second_block_pointer);

  return 0;
}
